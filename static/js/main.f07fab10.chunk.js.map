{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","features/loading.ts","app/store.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoActionType","FilterActionType","TODO_ACTIONS","todo","type","setCurrentTodo","payload","removeCurrentTodo","TODO_SELECTORS","state","currentTodo","currentTodoReducer","action","TodosActionType","FILTER_ACTIONS","title","setQuery","status","setStatus","FILTER_SELECTORS","filter","query","initialState","filterReducer","LoadingActionType","TODOS_ACTIONS","todos","SetTodos","TODOS_SELECTORS","preparedTodos","completed","toLowerCase","includes","todosReducer","LOADING_ACTIONS","setTodoLoading","setTodosLoading","LOADING_SELECTORS","loading","todoLoading","todosLoading","loadingReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Loader","className","TodoList","dispatch","useDispatch","useSelector","selectedTodo","selectedTodoId","id","length","map","classNames","onClick","handleSetSelectedTodo","TodoFilter","value","onSubmit","event","preventDefault","onChange","chosenStatus","target","placeholder","trim","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","isLoading","setIsLoading","useState","foundUser","setFoundUser","useEffect","userId","finally","href","email","name","App","isTodosLoading","setIsTodosLoading","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f07fab10.chunk.js","sourcesContent":["import type { RootState } from '../app/store';\nimport { Todo } from '../types/Todo';\n\nexport enum TodoActionType {\n  setCurrentTodo = 'currentTodo/SET',\n  removeCurrentTodo = 'currentTodo/REMOVE',\n}\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: TodoActionType.removeCurrentTodo };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: TodoActionType.setCurrentTodo;\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({\n  type: TodoActionType.removeCurrentTodo,\n});\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: TodoActionType.setCurrentTodo,\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const TODO_ACTIONS = { setTodo, removeTodo };\n\nexport const TODO_SELECTORS = {\n  getCurrentTodo: (state: RootState) => state.currentTodo,\n};\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case TodoActionType.setCurrentTodo:\n      return action.payload;\n    case TodoActionType.removeCurrentTodo:\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import type { RootState } from '../app/store';\nimport { Status } from '../types/Status';\n\nexport enum FilterActionType {\n  setQuery = 'filter/query/SET',\n  setStatus = 'filter/status/SET',\n}\n\ntype SetQueryAction = {\n  type: FilterActionType.setQuery,\n  payload: string,\n};\n\ntype SetStatusAction = {\n  type: FilterActionType.setStatus,\n  payload: Status,\n};\n\nconst setQuery = (title: string): SetQueryAction => ({\n  type: FilterActionType.setQuery,\n  payload: title,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: FilterActionType.setStatus,\n  payload: status,\n});\n\nexport const FILTER_ACTIONS = { setQuery, setStatus };\n\nexport const FILTER_SELECTORS = {\n  getQuery: (state: RootState) => state.filter.query,\n  getStatus: (state: RootState) => state.filter.status,\n};\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case FilterActionType.setQuery:\n      return { ...state, query: action.payload };\n    case FilterActionType.setStatus:\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import type { RootState } from '../app/store';\nimport { Todo } from '../types/Todo';\n\nexport enum TodosActionType {\n  SetTodos = 'todos/SET',\n}\n\ntype SetTodosAction = {\n  type: TodosActionType.SetTodos,\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: TodosActionType.SetTodos,\n  payload: todos,\n});\n\nexport const TODOS_ACTIONS = { setTodos };\n\nexport const TODOS_SELECTORS = {\n  getTodos: (state: RootState) => state.todos,\n  getPreparedTodos: (state: RootState) => {\n    const { todos, filter } = state;\n    const { query, status } = filter;\n\n    let preparedTodos: Todo[];\n\n    switch (status) {\n      case 'completed':\n        preparedTodos = [...todos].filter(todo => todo.completed);\n        break;\n      case 'active':\n        preparedTodos = [...todos].filter(todo => !todo.completed);\n        break;\n      case 'all':\n      default:\n        preparedTodos = [...todos];\n        break;\n    }\n\n    return preparedTodos\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n  },\n};\n\ntype State = Todo[];\ntype TodosActions = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: TodosActions,\n): Todo[] => {\n  switch (action.type) {\n    case TodosActionType.SetTodos:\n      return [...action.payload];\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import type { RootState } from '../app/store';\n\nexport enum LoadingActionType {\n  setTodoLoading = 'todoLoading/SET',\n  setTodosLoading = 'todosLoading/SET',\n}\n\ntype SetTodoLoading = {\n  type: LoadingActionType.setTodoLoading;\n  payload: boolean;\n};\n\ntype SetTodosLoading = {\n  type: LoadingActionType.setTodosLoading;\n  payload: boolean;\n};\n\nconst setTodoLoading = (status: boolean): SetTodoLoading => ({\n  type: LoadingActionType.setTodoLoading,\n  payload: status,\n});\n\nconst setTodosLoading = (status: boolean): SetTodosLoading => ({\n  type: LoadingActionType.setTodosLoading,\n  payload: status,\n});\n\nexport const LOADING_ACTIONS = { setTodoLoading, setTodosLoading };\n\nexport const LOADING_SELECTORS = {\n  getTodoLoadingStatus: (state: RootState) => state.loading.todoLoading,\n  getTodosLoadingStatus: (state: RootState) => state.loading.todosLoading,\n};\n\ntype State = {\n  todoLoading: boolean,\n  todosLoading: boolean,\n};\n\nconst initialState: State = {\n  todoLoading: false,\n  todosLoading: false,\n};\n\ntype Action = SetTodoLoading | SetTodosLoading;\n\nconst loadingReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case LoadingActionType.setTodoLoading:\n      return { ...state, todoLoading: action.payload };\n    case LoadingActionType.setTodosLoading:\n      return { ...state, todosLoading: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","/* eslint-disable import/no-extraneous-dependencies */\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\nimport loadingReducer from '../features/loading';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n  loading: loadingReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { TODO_ACTIONS, TODO_SELECTORS } from '../../features/currentTodo';\nimport { TODOS_SELECTORS } from '../../features/todos';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const todos = useSelector(TODOS_SELECTORS.getPreparedTodos);\n  const selectedTodo = useSelector(TODO_SELECTORS.getCurrentTodo);\n\n  const selectedTodoId = selectedTodo?.id;\n  const isLoading = false;\n\n  const handleSetSelectedTodo\n  = (todo: Todo) => dispatch(TODO_ACTIONS.setTodo(todo));\n\n  return (\n    <>\n      {todos.length <= 0 && !isLoading ? (\n        <div>There is no todos</div>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                className={classNames({\n                  'has-background-info-light': selectedTodoId === todo.id,\n                })}\n                key={todo.id}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleSetSelectedTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={`far ${selectedTodoId === todo.id\n                        ? 'fa-eye-slash'\n                        : 'fa-eye'}`}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FILTER_ACTIONS, FILTER_SELECTORS } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const query = useSelector(FILTER_SELECTORS.getQuery);\n  const status = useSelector(FILTER_SELECTORS.getStatus);\n\n  const setQuery = (value: string) => {\n    dispatch(FILTER_ACTIONS.setQuery(value));\n  };\n\n  const setStatus = (chosenStatus: Status) => {\n    dispatch(FILTER_ACTIONS.setStatus(chosenStatus));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => setStatus(event.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.trim().length !== 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TODO_ACTIONS, TODO_SELECTORS } from '../../features/currentTodo';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { LOADING_ACTIONS, LOADING_SELECTORS } from '../../features/loading';\n\nexport const TodoModal: React.FC = () => {\n  const selectedTodo = useSelector(TODO_SELECTORS.getCurrentTodo);\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(LOADING_SELECTORS.getTodoLoadingStatus);\n\n  const setIsLoading = (status: boolean) => {\n    dispatch(LOADING_ACTIONS.setTodoLoading(status));\n  };\n\n  const handleDeselectTodo = () => dispatch(TODO_ACTIONS.removeTodo());\n\n  const [foundUser, setFoundUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setFoundUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading || !selectedTodo || !foundUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => handleDeselectTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            {foundUser && (\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n                {' by '}\n\n                <a href={`mailto:${foundUser.email}`}>\n                  {foundUser.name}\n                </a>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from './components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { getTodos } from './api';\nimport { TODOS_ACTIONS } from './features/todos';\nimport { TODO_SELECTORS } from './features/currentTodo';\nimport { LOADING_ACTIONS, LOADING_SELECTORS } from './features/loading';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const selectedTodo = useSelector(TODO_SELECTORS.getCurrentTodo);\n  const isTodosLoading = useSelector(LOADING_SELECTORS.getTodosLoadingStatus);\n\n  const setIsTodosLoading = (status: boolean) => {\n    dispatch(LOADING_ACTIONS.setTodosLoading(status));\n  };\n\n  useEffect(() => {\n    setIsTodosLoading(true);\n\n    getTodos()\n      .then(res => dispatch(TODOS_ACTIONS.setTodos(res)))\n      .finally(() => setIsTodosLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n            <div className=\"block\">\n              {isTodosLoading ? (<Loader />) : (<TodoList />)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (<TodoModal />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}